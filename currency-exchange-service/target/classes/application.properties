server.port=8000
#It will get the config from: http://localhost:8888/currency-exchange/default
#The profile selected is: default
spring.application.name=currency-exchange
spring.config.import=optional:configserver:http://localhost:8888

#H2 configuration (to be deleted in a near future, h2 will be used in application-local.properties).
spring.datasource.url=jdbc:h2:mem:testdb-local

#Reason: By default, data.sql scripts are now run before Hibernate is initialized.
# This aligns the behavior of basic script-based initialization with that of Flyway and Liquibase.
# If you want to use data.sql to populate a schema created by Hibernate,
# set spring.jpa.defer-datasource-initialization to true.
# While mixing database initialization technologies is not recommended,
# this will also allow you to use a schema.sql script to build upon a Hibernate-created schema before it?s populated via data.sql.
spring.jpa.defer-datasource-initialization=true

#This property will allow us to start logging the SQL in log whenever a statement is executed.
spring.h2.console.enabled=true

#JPA
#This property will allow us to start logging the SQL in log whenever a statement is executed.
spring.jpa.show-sql=true

#Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#Resilience4j

#Retry
#max-attempts (number of tries) before calling a fallbackMethod or through an error.
resilience4j.retry.instances.sample-api.max-attempts=5
#wait-duration between attempts
resilience4j.retry.instances.sample-api.wait-duration=1s
#Each subsequent retry will take longer and longer, and that's what is called ExponentialBackoff.
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true

#Circuit Breaker
# We would want to increase the failureRateThreshold to 90%.
# Only if 90% of the requests fail,
# Then We would want to switch to an OPEN state (since the application will start in CLOSED state.
# So, you can configure things like that in this specific way.
resilience4j.circuitbreaker.instances.default.failure-rate-threshold=90

# "default" configuration

#Rate Limiter
# Rate limiting is all about saying, in 10 seconds, we'd want to only allow 2 calls API
resilience4j.ratelimiter.instances.default.limit-refresh-period.=10s
resilience4j.ratelimiter.instances.default.limit-for-period=2

#Bulk Head
# We allow maxConcurrent Calls is equal to 10.
resilience4j.bulkhead.instances.default.max-concurrent-calls=10

# "sample-api-rate" configuration
#Example of a custom configuration (instead of using the "default" config)
resilience4j.bulkhead.instances.sample-api-rate-limiter.max-concurrent-calls=4
resilience4j.ratelimiter.instances.sample-api-rate-limiter.limit-refresh-period.=10s
resilience4j.ratelimiter.instances.sample-api-rate-limiter.limit-for-period=5

# sleuth

#1.0. What we are configuring is to trace every request.
#If you'd want to trace only let's say, 10 percent of the requests.
#So, if this is production and let's say, you'd want to only trace five percent of the requests,
# you can #put it as 0.05.
#However, we'd want to trace every request in our test environment.
spring.sleuth.sampler.probability=1.0

##############Details################

#######Circuit Breaker#######
#there is a Circuit Breaker framework which is available, which is called Resilience4j.

#What if one of the services if down or is slow?
# impact entire chain.

#Questions:
#Can we return a fallback response if a service is down?
#Can we implement a circuit breaker pattern to reduce the load?
#If I see that microserviceX is down, instead of repeatedly hitting it and causing it to go down,
#can I actually return the default response back without even hitting the microservice
#Can we retry requests in case of temporary failures?
#can we retry requests in case of temporary failures? If there is a temporary failure from a microserviceX,
#can I retry it a few times and only when it has failed multiple times, I return a default response back?

#Can we implement something like rate limiting?
#We want to allow only a certain number of calls to a specific microservice in a specific period of time.

#######

#######Distributed tracing#######

#
# sleuth
# Whenever we are talking about microservices and tracing, we'd want to be able to trace the request across
# multiple microservices. And to be able to do that, each request should be assigned a unique Id.
#So, sleuth is one of the frameworks which actually assigns a unique Id to each request.
#And as the request goes across multiple microservices, the Id is maintained and the information
#is sent out to the tracing server using that specific Id. And this allows us to trace the request across
#multiple microservices.

# Distributed tracing - Asynchronous using Rabbit MQ

#Right now, what we are trying to do is actually directly connect to distributed tracing server over
#HTTP. So, API Gateway, Currency Conversion services, Currency Exchange service, all of these would be sending the
#information out to the Distributed Tracing Server using HTTP calls. And the distributed tracing
#server would be storing it to an in-memory database and be providing a UI around it.
#However, consider a scenario when the Distributed Tracing Server is down. What would happen?
#The information from these microservices is lost. And to prevent that from happening
#what we can do is, we can have a queue in between.
#We can have a queue like Rabbit MQ in between. All the microservices can send the information out
# to the Distributed Tracing Server using HTTP calls. And the distributed tracing server.
#This would ensure that even if the Distributor Tracing Server is down, the microservices can keep
#sending messages to Rabbit MQ. And when the Distributor Tracing Server is up, it can pick up the messages
#from the queue.

#One question you might be wondering about is
#how are the microservices able to locate the distributed tracing server Zipkin?
#We just added a few dependencies and somehow magically, they were able to find the distributed tracing
#server and send the logs over.
#How is that happening?
#That's happening because of the default configuration.
# By default, spring.zipkin.baseUrl is configured with localhost:9411.

#spring.zipkin.base-url=http://localhost:9411/

#And because we are actually running Zipkin on the same URL (our docker container), it's able to easily find it.

#######